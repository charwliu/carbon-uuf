/*
 * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.wso2.carbon.uuf.internal.deployment.parser;

import org.testng.Assert;
import org.testng.annotations.Test;
import org.wso2.carbon.uuf.api.reference.FileReference;
import org.wso2.carbon.uuf.internal.exception.ConfigurationException;
import org.wso2.carbon.uuf.internal.exception.FileOperationException;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * Test cases for YAML file parser.
 *
 * @since 1.0.0
 */
public class YamlFileParserTest {

    @Test
    public void testCannotReadFile() {
        FileReference yamlFile = mock(FileReference.class);
        when(yamlFile.getContent()).thenThrow(FileOperationException.class);

        Assert.assertThrows(ConfigurationException.class, () -> YamlFileParser.parse(yamlFile, Object.class));
    }

    @Test
    public void testInvalidYaml() {
        FileReference yamlFile = mock(FileReference.class);
        when(yamlFile.getContent()).thenReturn("# testing\n" +
                                                       "artifactId: org.wso2.carbon.uuf.sample.pets-store.feature\n" +
                                                       " - version: 1.0.0-SNAPSHOT\n" +
                                                       "- contextPath: pets-store\n" +
                                                       "dependencies:");

        Assert.assertThrows(ConfigurationException.class, () -> YamlFileParser.parse(yamlFile, DependencyNode.class));
    }

    @Test
    public void testEmptyYaml() {
        FileReference yamlFile = mock(FileReference.class);
        when(yamlFile.getContent()).thenReturn("# Only a comment.\n");

        Assert.assertThrows(ConfigurationException.class, () -> YamlFileParser.parse(yamlFile, ComponentConfig.class));
    }

    @Test
    public void test() {
        FileReference yamlFile = mock(FileReference.class);
        when(yamlFile.getContent()).thenReturn("# Auto-generated by UUF Maven Plugin. Do NOT modify manually.\n" +
                                                       "contextPath: null\n" +
                                                       "errorPages:\n" +
                                                       "  '404': /foundation/error/404\n" +
                                                       "  default: /foundation/error/default\n" +
                                                       "loginPageUri: /simple-auth/login\n" +
                                                       "menus:\n" +
                                                       "- name: main\n" +
                                                       "  items:\n" +
                                                       "  - icon: fw-home\n" +
                                                       "    link: '#'\n" +
                                                       "    submenus: []\n" +
                                                       "    text: Home\n" +
                                                       "other:\n" +
                                                       "  appName: Pet Store\n" +
                                                       "security:\n" +
                                                       "theme: org.wso2.carbon.uuf.sample.default.theme\n" +
                                                       "sessionManagement:\n" +
                                                       "  factoryClassName: org.wso2.carbon.uuf.auth.SMFactory\n" +
                                                       "  timeout: 600\n" +
                                                       "authorizer: org.wso2.carbon.uuf.auth.CaasAuthorizer");

        AppConfig appConfig = YamlFileParser.parse(yamlFile, AppConfig.class);
        Assert.assertEquals(appConfig.getContextPath(), null);
        Assert.assertEquals(appConfig.getErrorPages().get("404"), "/foundation/error/404");
        Assert.assertEquals(appConfig.getLoginPageUri(), "/simple-auth/login");
        Assert.assertEquals(appConfig.getMenus().size(), 1);
        Assert.assertEquals(appConfig.getMenus().get(0).getName(), "main");
        Assert.assertEquals(appConfig.getMenus().get(0).getItems().size(), 1);
        Assert.assertEquals(appConfig.getMenus().get(0).getItems().get(0).getText(), "Home");
        Assert.assertEquals(appConfig.getOther().size(), 1);
        Assert.assertEquals(appConfig.getOther().get("appName"), "Pet Store");
        Assert.assertEquals(appConfig.getTheme(), "org.wso2.carbon.uuf.sample.default.theme");
        Assert.assertNotEquals(appConfig.getSessionManagement(), null);
        Assert.assertEquals(appConfig.getSessionManagement().getFactoryClassName(),
                            "org.wso2.carbon.uuf.auth.SMFactory");
        Assert.assertEquals(appConfig.getSessionManagement().getTimeout(), 600);
        Assert.assertEquals(appConfig.getAuthorizer(), "org.wso2.carbon.uuf.auth.CaasAuthorizer");
    }

    @Test
    public void testNullSessionManagement() {
        FileReference yamlFile = mock(FileReference.class);
        when(yamlFile.getContent()).thenReturn("# Auto-generated by UUF Maven Plugin. Do NOT modify manually.\n" +
                                               "contextPath: null\n" +
                                               "errorPages:\n" +
                                               "  '404': /foundation/error/404\n" +
                                               "  default: /foundation/error/default\n" +
                                               "loginPageUri: /simple-auth/login\n" +
                                               "menus:\n" +
                                               "- name: main\n" +
                                               "  items:\n" +
                                               "  - icon: fw-home\n" +
                                               "    link: '#'\n" +
                                               "    submenus: []\n" +
                                               "    text: Home\n" +
                                               "other:\n" +
                                               "  appName: Pet Store\n" +
                                               "security:\n" +
                                               "theme: org.wso2.carbon.uuf.sample.default.theme\n");

        AppConfig appConfig = YamlFileParser.parse(yamlFile, AppConfig.class);
        Assert.assertNotEquals(appConfig.getSessionManagement(), null);
        Assert.assertEquals(appConfig.getSessionManagement().getFactoryClassName(), null);
        Assert.assertEquals(appConfig.getSessionManagement().getTimeout(), 0);
    }
}
